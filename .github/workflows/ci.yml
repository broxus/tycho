name: CI

on:
  push:
    branches:
      - master
  merge_group:
  pull_request:
    branches:
      - "**"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CC: /usr/bin/clang
  CXX: /usr/bin/clang++

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      shell: ${{ steps.filter.outputs.shell }}
      proto: ${{ steps.filter.outputs.proto }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
        id: filter
        with:
          filters: |
            rust:
              - 'Cargo.toml'
              - 'Cargo.lock'
              - '**.rs'
            shell:
              - '**.sh'
            proto:
              - '**.proto'
  rustfmt:
    name: Rustfmt
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' }}
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: ./.github/actions/init
        with:
          toolchain: nightly
          components: rustfmt
          install-clang: false
          setup-cache: false
      - name: Check formatting
        run: just check_format

  clippy:
    name: Clippy
    needs: [rustfmt, changes]
    if: ${{ needs.changes.outputs.rust == 'true' }} # we duplicate it so gh actions will skip the job and mark it as success
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: ./.github/actions/init
        with:
          components: "clippy,rustfmt"
      - name: Clippy check
        run: just lint
  test:
    name: Test with codecov
    runs-on: [self-hosted, linux]
    needs: [rustfmt, changes]
    if: ${{ needs.changes.outputs.rust == 'true' }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: ./.github/actions/init
        with:
          components: llvm-tools-preview
          fake-procfs: true
      - uses: taiki-e/install-action@9185c192a96ba09167ad8663015b3fbbf007ec79 # v2.56.2
        with:
          tool: cargo-llvm-cov,cargo-nextest
      - name: Run tests
        env:
          RUSTC_WRAPPER: scripts/coverage.py
          RUST_LOG: warn
        run: just test_cov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@ab904c41d6ece82784817410c45d8b8c02684457 # v3
        with:
          # Dear h4xx0rz reading this,
          # Feel free to use this token to upload arbitrary coverage information to codecov.
          # We do not care. The best you can do is make us facepalm.
          # Best,
          token: 0c64952e-3aeb-4b26-8f34-22784e8149cd
          files: codecov.json
          fail_ci_if_error: true

  integration-test:
    name: Integration Test Suite
    runs-on: [self-hosted, linux]
    if: ${{ needs.changes.outputs.rust == 'true' }}
    needs: [rustfmt, changes]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: ./.github/actions/init
        with:
          fake-procfs: true
      - name: Run integration tests
        env:
          RUST_LOG: warn
        run: just run_integration_tests

  metrics:
    name: Metrics
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2
      - name: Check dashboard
        run: just check_dashboard

  msrv:
    name: Check minimum supported Rust version
    if: ${{ needs.changes.outputs.rust == 'true' }}
    runs-on: self-hosted
    needs: [changes]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: ./.github/actions/init
        with:
          install-clang: true
      - uses: taiki-e/install-action@9185c192a96ba09167ad8663015b3fbbf007ec79 # v2.56.2
        with:
          tool: cargo-msrv
      - name: Check semver
        run: cargo msrv verify --manifest-path cli/Cargo.toml

  check-protos:
    name: Check protos
    needs: [changes]
    if: ${{ needs.changes.outputs.proto == 'true' }}
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: ./.github/actions/init
        with:
          install-clang: false
          setup-cache: false
      - name: Install protobuf
        run: sudo apt update && sudo apt-get -y install protobuf-compiler
      - name: Update RPC proto
        run: just update_rpc_proto
      - name: Check for uncommitted changes
        run: git diff --exit-code

  check-cli-reference:
    name: Check CLI Reference
    needs: [changes]
    if: ${{ needs.changes.outputs.rust == 'true' }}
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: ./.github/actions/init
      - name: Update CLI reference
        run: just update_cli_reference
      - name: Check for uncommitted changes
        run: git diff --exit-code
