use std::ffi::OsString;
use std::path::PathBuf;

use tycho_util::project_root;

#[derive(Debug)]
pub struct SimulatorConfig {
    pub helm_release: String,
    pub project_root: ProjectRoot,
    pub pod: PodConfig,
}

#[derive(Debug)]
pub struct PodConfig {
    pub node_port: u16,
    pub metrics_port: u16,
    pub db_path: String,
    pub image_name: String,
}
impl PodConfig {
    pub fn name(pod_index: usize) -> String {
        format!("tycho-{pod_index}")
    }
}

/// Essential file layout:
/// ```
/// ./ - git project root, contains common configs for node run
/// ├── config.json - node config template, will be patched and used by every pod
/// ├── keys.json - keypair for minter and global config, added into final zerostate
/// ├── logger.json - used by every pod
/// ├── zerostate.json - initial BC state template
/// ├── simulated.Dockerfile - builder
/// ├── .scratch/
/// │   └── helm/ - output for `simulator prepare` command
/// ├── .temp/ - contains files generated by `gen-network.sh`
/// │   ├── global-config.json - used as a donor of zerostate hash, bootstrap peers are replaced
/// │   ├── zerostate.json - patched zerostate that is encoded into BOC, just fyi
/// │   ├── zerostate.boc
/// │   ├── keys{N}.json - used to rewrite global config addresses, leaving zerostate.boc untouched
/// │   └── config{N}.json - ignored
/// └── simulator/
///     └── helm/ - templates for `simulator prepare` command
/// ```
#[derive(Debug, Clone)]
pub struct ProjectRoot {
    pub dir: OsString,
    pub scratch: ScratchDir,
    pub temp: TempDir,
    pub simulator: SimulatorDir,
    pub config: OsString,
    pub logger: OsString,
    pub dockerfile: OsString,
}

impl SimulatorConfig {
    pub fn new() -> Result<Self, std::io::Error> {
        let project_root = project_root()?;

        let simulator_dir = SimulatorDir {
            helm: SimulatorHelmDir {
                tycho: SimulatorHelmTychoDir {
                    dir: project_root
                        .join("simulator")
                        .join("helm")
                        .join("tycho")
                        .into(),
                },
            },
        };

        let scratch_dir = project_root.join(".scratch");
        let scratch_helm_dir = scratch_dir.join("helm");
        let scratch_helm_tycho_dir = scratch_helm_dir.join("tycho");
        let scratch_dir = ScratchDir {
            helm: HelmDir {
                tycho: HelmTychoDir {
                    values: scratch_helm_tycho_dir.join("values.yaml").into(),
                    dir: scratch_helm_tycho_dir.into(),
                },
                dir: scratch_helm_dir.into(),
            },
            dir: scratch_dir.into(),
        };

        let temp_dir = project_root.join(".temp");
        let temp_dir = TempDir {
            global_config: temp_dir.join("global-config.json").into(),
            zerostate_boc: temp_dir.join("zerostate.boc").into(),
            dir: temp_dir,
        };

        let project_root = ProjectRoot {
            scratch: scratch_dir,
            temp: temp_dir,
            simulator: simulator_dir,
            config: project_root.join("config.json").into(),
            logger: project_root.join("logger.json").into(),
            dockerfile: project_root.join("simulated.Dockerfile").into(),
            dir: project_root.into(),
        };

        Ok(Self {
            helm_release: "tycho-simulated".to_string(),
            project_root,
            pod: PodConfig {
                node_port: 30310,
                metrics_port: 9090,
                db_path: "/app/db".to_string(),
                image_name: "tycho-simulated".to_string(),
            },
        })
    }
}

#[derive(Debug, Clone)]
pub struct SimulatorDir {
    pub helm: SimulatorHelmDir,
}

#[derive(Debug, Clone)]
pub struct SimulatorHelmDir {
    pub tycho: SimulatorHelmTychoDir,
}

#[derive(Debug, Clone)]
pub struct SimulatorHelmTychoDir {
    pub dir: OsString,
}

#[derive(Debug, Clone)]
pub struct ScratchDir {
    pub dir: OsString,
    pub helm: HelmDir,
}

#[derive(Debug, Clone)]
pub struct HelmDir {
    pub dir: OsString,
    pub tycho: HelmTychoDir,
}

#[derive(Debug, Clone)]
pub struct HelmTychoDir {
    pub dir: OsString,
    pub values: OsString,
}

#[derive(Debug, Clone)]
pub struct TempDir {
    pub global_config: OsString,
    pub zerostate_boc: OsString,
    dir: PathBuf,
}
impl TempDir {
    pub fn keys(&self, node_index: usize) -> OsString {
        self.dir.join(format!("keys{node_index}.json")).into()
    }
}
